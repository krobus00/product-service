// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/krobus00/product-service/internal/model (interfaces: ProductRepository)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	redis "github.com/go-redis/redis/v8"
	gomock "github.com/golang/mock/gomock"
	kit "github.com/krobus00/krokit"
	model "github.com/krobus00/product-service/internal/model"
	gorm "gorm.io/gorm"
)

// MockProductRepository is a mock of ProductRepository interface.
type MockProductRepository struct {
	ctrl     *gomock.Controller
	recorder *MockProductRepositoryMockRecorder
}

// MockProductRepositoryMockRecorder is the mock recorder for MockProductRepository.
type MockProductRepositoryMockRecorder struct {
	mock *MockProductRepository
}

// NewMockProductRepository creates a new mock instance.
func NewMockProductRepository(ctrl *gomock.Controller) *MockProductRepository {
	mock := &MockProductRepository{ctrl: ctrl}
	mock.recorder = &MockProductRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductRepository) EXPECT() *MockProductRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockProductRepository) Create(arg0 context.Context, arg1 *model.Product) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockProductRepositoryMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockProductRepository)(nil).Create), arg0, arg1)
}

// DeleteByID mocks base method.
func (m *MockProductRepository) DeleteByID(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByID", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByID indicates an expected call of DeleteByID.
func (mr *MockProductRepositoryMockRecorder) DeleteByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByID", reflect.TypeOf((*MockProductRepository)(nil).DeleteByID), arg0, arg1)
}

// FindByID mocks base method.
func (m *MockProductRepository) FindByID(arg0 context.Context, arg1 string) (*model.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", arg0, arg1)
	ret0, _ := ret[0].(*model.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockProductRepositoryMockRecorder) FindByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockProductRepository)(nil).FindByID), arg0, arg1)
}

// FindOSPaginatedIDs mocks base method.
func (m *MockProductRepository) FindOSPaginatedIDs(arg0 context.Context, arg1 *model.PaginationPayload) ([]string, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOSPaginatedIDs", arg0, arg1)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindOSPaginatedIDs indicates an expected call of FindOSPaginatedIDs.
func (mr *MockProductRepositoryMockRecorder) FindOSPaginatedIDs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOSPaginatedIDs", reflect.TypeOf((*MockProductRepository)(nil).FindOSPaginatedIDs), arg0, arg1)
}

// FindPaginatedIDs mocks base method.
func (m *MockProductRepository) FindPaginatedIDs(arg0 context.Context, arg1 *model.PaginationPayload) ([]string, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindPaginatedIDs", arg0, arg1)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindPaginatedIDs indicates an expected call of FindPaginatedIDs.
func (mr *MockProductRepositoryMockRecorder) FindPaginatedIDs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindPaginatedIDs", reflect.TypeOf((*MockProductRepository)(nil).FindPaginatedIDs), arg0, arg1)
}

// InjectDB mocks base method.
func (m *MockProductRepository) InjectDB(arg0 *gorm.DB) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InjectDB", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// InjectDB indicates an expected call of InjectDB.
func (mr *MockProductRepositoryMockRecorder) InjectDB(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InjectDB", reflect.TypeOf((*MockProductRepository)(nil).InjectDB), arg0)
}

// InjectOpensearchClient mocks base method.
func (m *MockProductRepository) InjectOpensearchClient(arg0 kit.OpensearchClient) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InjectOpensearchClient", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// InjectOpensearchClient indicates an expected call of InjectOpensearchClient.
func (mr *MockProductRepositoryMockRecorder) InjectOpensearchClient(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InjectOpensearchClient", reflect.TypeOf((*MockProductRepository)(nil).InjectOpensearchClient), arg0)
}

// InjectRedisClient mocks base method.
func (m *MockProductRepository) InjectRedisClient(arg0 *redis.Client) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InjectRedisClient", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// InjectRedisClient indicates an expected call of InjectRedisClient.
func (mr *MockProductRepositoryMockRecorder) InjectRedisClient(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InjectRedisClient", reflect.TypeOf((*MockProductRepository)(nil).InjectRedisClient), arg0)
}

// Update mocks base method.
func (m *MockProductRepository) Update(arg0 context.Context, arg1 *model.Product) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockProductRepositoryMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockProductRepository)(nil).Update), arg0, arg1)
}

// UpdateAllThumbnail mocks base method.
func (m *MockProductRepository) UpdateAllThumbnail(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAllThumbnail", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAllThumbnail indicates an expected call of UpdateAllThumbnail.
func (mr *MockProductRepositoryMockRecorder) UpdateAllThumbnail(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAllThumbnail", reflect.TypeOf((*MockProductRepository)(nil).UpdateAllThumbnail), arg0, arg1, arg2)
}
